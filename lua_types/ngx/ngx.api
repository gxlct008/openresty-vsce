
ngx

ngx.null -- null
ngx.arg  -- {}
ngx.ctx  -- {}

ngx.var
ngx.var.app_name
ngx.var.act_type
ngx.var.remote_addr             -- 客户端 IP 地址
ngx.var.remote_port
ngx.var.remote_user
ngx.var.remote_passwd
ngx.var.binary_remote_addr
ngx.var.host
ngx.var.hostname
ngx.var.scheme
ngx.var.https
ngx.var.http_host
ngx.var.http_user_agent
ngx.var.http_content_type
ngx.var.http_cookie
ngx.var.server_name
ngx.var.content_type
ngx.var.content_length
ngx.var.is_args
ngx.var.query_string
ngx.var.nginx_version
ngx.var.uri
ngx.var.request_uri
ngx.var.request_method
ngx.var.request_filename
ngx.var.cookie_openid

ngx.location
ngx.location.capture(url)
ngx.location.capture_multi({url}, {url})

ngx.status

ngx.header  -- 设置待发送的响应头信息
ngx.header['content-type']
ngx.header['content-type'] = 'text/html; charset=utf-8'  -- text/html
ngx.header['content-type'] = 'text/plain; charset=utf-8' -- text/plain

ngx.resp
ngx.resp.get_headers(max_headers=100?, raw=false?)  -- 所有响应头信息

ngx.req
ngx.req.is_internal()                               -- 是否内部请求
ngx.req.start_time()                                -- 当前请求创建时间
ngx.req.http_version()                              -- 当前请求的HTTP版本号
ngx.req.raw_header(no_request_line=false?)          -- 原始HTTP协议头
ngx.req.get_method()                                -- 请求方法名称
ngx.req.set_method(method_id)                       -- 设置请求方法(常量)
ngx.req.set_method(ngx.HTTP_GET)                    -- 设置请求方法(GET)
ngx.req.set_method(ngx.HTTP_GET)                    -- 设置请求方法(POST)
ngx.req.set_uri(uri, jump=false?)                   -- 重写当前请求URI
ngx.req.set_uri_args(args)                          -- 重写当前请求参数
ngx.req.get_uri_args(max_args=100?)                 -- URI查询参数
ngx.req.get_post_args(max_args=100?)                -- POST查询参数
ngx.req.get_headers(max_headers=100?, raw=false?)   -- 所有请求头信息
ngx.req.set_header(name, value)                     -- 重写当前请求头信息
ngx.req.clear_header(name)                          -- 清除指定头信息
ngx.req.read_body()                                 -- 读取客户端请求体
ngx.req.discard_body()                              -- 明确丢弃请求体
ngx.req.get_body_data()                             -- 取回内存中的请求体数据
ngx.req.get_body_file()                             -- 获取存储请求体数据的临时文件名
ngx.req.set_body_data(data)                         -- 设置当前请求的请求体
ngx.req.set_body_file(file_name, auto_clean=false?) -- 指定的数据文件设置当前请求的请求体
ngx.req.init_body(buffer_size?)                     -- 创建一个新的空请求体并初始化缓冲区
ngx.req.append_body(data_chunk)                     -- 向已存在的请求体中追加写入数据块
ngx.req.finish_body()                               -- 结束新请求体构造过程

ngx.req.socket() -> req_socket

    req_socket
    req_socket:receive(size?)                       -- tcpsock:receive
    req_socket:receive(pattern?)                    -- tcpsock:receive
    req_socket:receiveuntil(pattern, options?)      -- tcpsock:receiveuntil

ngx.exec(uri, args?)               -- 执行一个内部跳转
ngx.redirect(uri, status=302?)     -- 重定向
ngx.send_headers()                 -- 指明把应答头发送出去
ngx.headers_sent                   -- 应答头部是否已经被发送=

ngx.print(...)                     -- 输出响应体(不带回车)
ngx.say(...)                       -- 输出响应体(带上回车)

ngx.log(log_level , ...)
ngx.log(ngx.STDERR, ...)
ngx.log(ngx.EMERG , ...)
ngx.log(ngx.ALERT , ...)
ngx.log(ngx.CRIT  , ...)
ngx.log(ngx.ERR   , ...)
ngx.log(ngx.WARN  , ...)
ngx.log(ngx.NOTICE, ...)
ngx.log(ngx.INFO  , ...)
ngx.log(ngx.DEBUG , ...)

ngx.flush(wait=false?)             -- 向客户端刷新响应输出

ngx.exit(status)
ngx.exit(ngx.OK)
ngx.exit(ngx.ERROR)
ngx.exit(ngx.DECLINED)
ngx.exit(ngx.HTTP_OK)
ngx.exit(ngx.HTTP_NOT_FOUND)

ngx.eof()
ngx.sleep(seconds)
ngx.escape_uri(str)
ngx.unescape_uri(str)
ngx.encode_args(table)
ngx.decode_args(str)
ngx.encode_base64(str)
ngx.decode_base64(str)
ngx.crc32_short(str)
ngx.crc32_long(str)
ngx.hmac_sha1(secret_key, str)
ngx.md5(str)
ngx.md5_bin(str)
ngx.sha1_bin(str)
ngx.quote_sql_str(raw_value)
ngx.today()
ngx.time()
ngx.now()
ngx.update_time()
ngx.localtime()
ngx.utctime()
ngx.cookie_time(sec)
ngx.http_time(sec)
ngx.parse_http_time(sec)
ngx.is_subrequest()

ngx.re -- 正则表达式库
ngx.re.match(subject, regex, options?, ctx?, res_table?)
ngx.re.find(subject, regex, options?, ctx?, nth?)
ngx.re.gmatch(subject, regex, options?)
ngx.re.sub(subject, regex, replace, options?)
ngx.re.gsub(subject, regex, replace, options?)

ngx.shared                                          -- ngx.shared.DICT
ngx.shared.*                                        -> DICT
ngx.shared.my_cache                                 -> DICT
ngx.shared.my_events                                -> DICT
ngx.shared.my_index                                 -> DICT
ngx.shared.my_locks                                 -> DICT
ngx.shared.my_testing                               -> DICT
ngx.shared.app_waf_limit                            -> DICT

    DICT                                            -- ngx.shared.DICT
    DICT:get(key)                                   -- ngx.shared.DICT.get
    DICT:get_stale(key)                             -- ngx.shared.DICT.get_stale
    DICT:set(key, val, exptime?, flags?)            -- ngx.shared.DICT.set
    DICT:safe_set(key, val, exptime?, flags?)       -- ngx.shared.DICT.safe_set
    DICT:add(key, val, exptime?, flags?)            -- ngx.shared.DICT.add
    DICT:replace(key, val, exptime?, flags?)        -- ngx.shared.DICT.replace
    DICT:delete(key)                                -- ngx.shared.DICT.delete
    DICT:incr(key, val, init?)                      -- ngx.shared.DICT.incr
    DICT:lpush(key, val)                            -- ngx.shared.DICT.lpush
    DICT:rpush(key, val)                            -- ngx.shared.DICT.rpush
    DICT:lpop(key)                                  -- ngx.shared.DICT.lpop
    DICT:rpop(key)                                  -- ngx.shared.DICT.rpop
    DICT:llen(key)                                  -- ngx.shared.DICT.llen
    DICT:flush_all()                                -- ngx.shared.DICT.flush_all
    DICT:flush_expired(max_count?)                  -- ngx.shared.DICT.flush_expired
    DICT:get_keys(max_count?)                       -- ngx.shared.DICT.get_keys

ngx.socket
ngx.socket.udp() -> udpsock

    udpsock
    udpsock:setpeername(host, port)
    udpsock:send(data)
    udpsock:receive(size?)
    udpsock:close()
    udpsock:settimeout(time)

ngx.socket.tcp()                -> tcpsock
ngx.socket.stream()             -> tcpsock
ngx.socket.connect(host, port)  -> tcpsock

    tcpsock
    tcpsock:connect(host, port, options_table?)
    tcpsock:sslhandshake(reused_session?, server_name?, ssl_verify?)
    tcpsock:send(data)
    tcpsock:receive(size?)
    tcpsock:receive(pattern?)
    tcpsock:receiveuntil(pattern, options?)
    tcpsock:close()
    tcpsock:settimeout(time)
    tcpsock:settimeouts(connect_timeout, send_timeout, read_timeout)
    tcpsock:setoption(option, value?)
    tcpsock:setkeepalive(timeout?, size?)
    tcpsock:getreusedtimes()

ngx.get_phase()

ngx.thread
ngx.thread.spawn(fun, ...)
ngx.thread.wait(thread1, ...)
ngx.thread.kill(thread)

ngx.on_abort(callback) -> ok, err -- 当客户端关闭连接时自动调用

ngx.timer
ngx.timer.at(delay, callback, ....)
ngx.timer.every(delay, callback, ....)
ngx.timer.running_count()
ngx.timer.pending_count()

ngx.config
ngx.config.subsystem          -- 子系统运行环境: http|stream
ngx.config.debug              -- 是否为调试版本
ngx.config.prefix()           -- Nginx服务的路径
ngx.config.nginx_version      -- Nginx内核版本
ngx.config.nginx_configure()  -- 编译Nginx时的命令参数
ngx.config.ngx_lua_version    -- ngx_lua模块版本

ngx.worker
ngx.worker.exiting()          -- 进程退出中
ngx.worker.pid()              -- 进程号
ngx.worker.id()               -- 进程序号
ngx.worker.count()            -- 进程数

ngx.AGAIN                  -- = -2
ngx.ALERT                  -- =  2
ngx.CRIT                   -- =  3
ngx.DEBUG                  -- =  8
ngx.DECLINED               -- = -5
ngx.DONE                   -- = -4
ngx.EMERG                  -- =  1
ngx.ERR                    -- =  4
ngx.ERROR                  -- = -1
ngx.INFO                   -- =  7
ngx.NOTICE                 -- =  6
ngx.OK                     -- =  0
ngx.STDERR                 -- =  0
ngx.WARN                   -- =  5
