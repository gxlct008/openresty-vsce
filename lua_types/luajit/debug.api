
debug

DebugInfo                                   -- 函数信息表
DebugInfo.currentline        -> number      -- 函数所在的行号
DebugInfo.isvararg           -> boolean     -- 该函数是否含有可变参数(...)
DebugInfo.lastlinedefined    -> number      -- 该函数定义的源代码中最后一行的行号
DebugInfo.linedefined        -> number      -- source 中函数被定义之处的行号
DebugInfo.name               -> string      -- 该函数名称
DebugInfo.namewhat           -> string      -- 上一个字段的含义。它可能是 global、local、method、field 或空字符串。空字符串表示Lua没有找到该函数的名称
DebugInfo.nparams            -> number      -- 该函数参数的数量
DebugInfo.nups               -> number      -- 该函数的 upvalue 的数量
DebugInfo.short_src          -> string      -- source 的简短版本(最多 60 个字符)，记录一些有用的错误信息
DebugInfo.source             -> string      -- 标明函数被定义的地方。如果函数在一个字符串内被定义(通过 loadstring)，source 就是那个字符串。如果函数在一个文件中定义，source 是@加上文件名
DebugInfo.what               -> string      -- 函数的类型。如果foo是一个普通的Lua函数，则为“Lua”；如果是一个C函数，则为“C”；如果是一个Lua程序块（chunk）的主程序部分，则为main
DebugInfo.func               -> function    -- 函数本身
DebugInfo.activelines        -> boolean[]   -- 合法行号表

debug.debug()

debug.getinfo(f: function | number, what?: string)  -> DebugInfo
-- debug.getinfo(thread, f: function | number, what?: string)

debug.getmetatable(t: table)                        -> mt: table
debug.setmetatable(t: table, mt: table)
debug.getregistry()                                 -> gt: table

debug.getuservalue(u: userdata)                     -> any
debug.setuservalue(u: userdata, value: any)

debug.getfenv(f: function | number)                 -> ft: table
debug.setfenv(f: function | number, ft: table)

debug.gethook(t?: any)  -> hook: function, mask: string, count: number
debug.sethook(hook?: function, mask?: string, count?: number)
-- debug.sethook(thread, hook?: function, mask?: string, count?: number)

debug.getlocal(level: number, n: number)                -> id: string, value: any
-- debug.getlocal(thread, level: number, n: number)

debug.setlocal(level: number, n: number, value: any)    -> id: string
-- debug.setlocal(thread, level: number, n: number, value: any)

debug.traceback(message?: string, level?: number)       -> string
-- debug.traceback(thread, message?: string, level?: number)

debug.getupvalue(f: function, n: number)                -> id: string, value: any
debug.setupvalue(f: function, n: number, value: any)    -> id: string
debug.upvalueid(f: function, n: number)                 -> id: userdata
debug.upvaluejoin(f1: function, n1: number, f2: function, n2: number)
